import pg8000
import os
from datetime import datetime

class SistemaControlePonto:
    def __init__(self):
        # Configurações de conexão
        self.nome_banco = "ponto-db"
        self.usuario = "postgres"
        self.senha = "root"
        self.host = "localhost"
        self.porta = 5435  
        self.conexao = None
        self.cursor = None

    def conectar(self):
        try:
            self.conexao = pg8000.connect(
                database=self.nome_banco,
                user=self.usuario,
                password=self.senha,
                host=self.host,
                port=self.porta
            )
            self.cursor = self.conexao.cursor()
            print("Conexão estabelecida com sucesso!")
        except pg8000.DatabaseError as error:
            print(f"Erro ao conectar ao banco de dados: {error}")
            raise

    def __enter__(self):
        try:
            self.conectar()
            print("Conexão no __enter__ estabelecida com sucesso!")
            return self
        except Exception as error:
            print(f"Erro ao tentar entrar no contexto: {error}")
            raise

    def __exit__(self, exc_type, exc_val, exc_tb):
        if self.conexao:
            if exc_type is None:
                self.conexao.commit()
            else:
                self.conexao.rollback()
                print(f"Ocorreu um erro: {exc_val}")
            self.cursor.close()
            self.conexao.close()
            print("Conexão fechada.")

    # def criar_tabelas(self):
    #     try:
    #         with open("create_tables.sql", "r") as file:
    #             self.cursor.execute(file.read())
    #         self.conexao.commit()
    #         print("Tabelas criadas com sucesso!")
    #     except pg8000.DatabaseError as error:
    #         print(f"Erro ao criar tabelas: {error}")
    #         raise

    def limpar_tela(self):
        os.system('cls' if os.name == 'nt' else 'clear')

    def exibir_splash_screen(self):
        self.limpar_tela()
        print("=" * 40)
        print("Sistema de Controle de Ponto")
        print("Desenvolvido por: [Rafael Caires, Júlia Negri, Maria Isabel]")
        print("Disciplina: Banco de Dados")
        print("Professor: Howard Roatti")
        print("=" * 40)

        # Contagem de registros
        try:
            self.cursor.execute("SELECT COUNT(*) FROM Funcionarios")
            count_funcionarios = self.cursor.fetchone()[0]
            self.cursor.execute("SELECT COUNT(*) FROM Registros_de_Ponto")
            count_registros = self.cursor.fetchone()[0]
            print(f"Total de Funcionários: {count_funcionarios}")
            print(f"Total de Registros de Ponto: {count_registros}")
        except pg8000.DatabaseError as error:
            print(f"Erro ao consultar contagem de registros: {error}")
        print("=" * 40)
        input("Pressione Enter para continuar...")

    def exibir_menu_principal(self):
        while True:
            self.limpar_tela()
            print("=== Menu Principal ===")
            print("1. Relatórios")
            print("2. Inserir Registros")
            print("3. Remover Registros")
            print("4. Atualizar Registros")
            print("5. Sair")
            opcao = input("Escolha uma opção: ")

            if opcao == '1':
                self.menu_relatorios()
            elif opcao == '2':
                self.menu_inserir_registros()
            elif opcao == '3':
                self.menu_remover_registros()
            elif opcao == '4':
                self.menu_atualizar_registros()
            elif opcao == '5':
                print("Saindo...")
                break
            else:
                input("Opção inválida! Pressione Enter para continuar...")

    def menu_relatorios(self):
        while True:
            self.limpar_tela()
            print("=== Menu de Relatórios ===")
            print("1. Relatório de Horas Trabalhadas por Funcionário")
            print("2. Relatório de Registros de Ponto")
            print("3. Voltar ao Menu Principal")
            opcao = input("Escolha uma opção: ")

            if opcao == '1':
                self.relatorio_horas_trabalhadas()
            elif opcao == '2':
                self.relatorio_registros_ponto()
            elif opcao == '3':
                break
            else:
                input("Opção inválida! Pressione Enter para continuar...")

    def relatorio_horas_trabalhadas(self):
        try:
            self.cursor.execute("""
                SELECT f.nome, COUNT(r.registro_id) AS total_registros,
                       SUM(EXTRACT(EPOCH FROM (r.hora_saida - r.hora_entrada))/3600) AS horas_trabalhadas
                FROM Funcionarios f
                LEFT JOIN Registros_de_Ponto r ON f.funcionario_id = r.funcionario_id
                GROUP BY f.nome
            """)
            resultados = self.cursor.fetchall()
            self.limpar_tela()
            print("=== Relatório de Horas Trabalhadas por Funcionário ===")
            for linha in resultados:
                horas_trabalhadas = linha[2] if linha[2] is not None else 0.0
                print(f"Funcionário: {linha[0]}, Total de Registros: {linha[1]}, Horas Trabalhadas: {horas_trabalhadas:.2f}")
            input("\nPressione Enter para continuar...")
        except pg8000.DatabaseError as error:
            print(f"Erro ao gerar relatório: {error}")

    def relatorio_registros_ponto(self):
        try:
            self.cursor.execute("""
                SELECT f.nome, r.data, r.hora_entrada, r.hora_saida
                FROM Funcionarios f
                JOIN Registros_de_Ponto r ON f.funcionario_id = r.funcionario_id
                ORDER BY f.nome, r.data
            """)
            resultados = self.cursor.fetchall()
            self.limpar_tela()
            print("=== Relatório de Registros de Ponto ===")
            for linha in resultados:
                print(f"Funcionário: {linha[0]}, Data: {linha[1]}, Entrada: {linha[2]}, Saída: {linha[3]}")
            input("\nPressione Enter para continuar...")
        except pg8000.DatabaseError as error:
            print(f"Erro ao gerar relatório: {error}")

    def menu_inserir_registros(self):
        while True:
            self.limpar_tela()
            print("=== Inserir Registros ===")
            print("1. Inserir Funcionário")
            print("2. Inserir Registro de Ponto")
            print("3. Voltar ao Menu Principal")
            opcao = input("Escolha uma opção: ")

            if opcao == '1':
                self.inserir_funcionario()
            elif opcao == '2':
                self.inserir_registro_ponto()
            elif opcao == '3':
                break
            else:
                input("Opção inválida! Pressione Enter para continuar...")

    def inserir_funcionario(self):
        self.limpar_tela()
        print("=== Inserir Novo Funcionário ===")
        nome = input("Nome do funcionário: ")
        cargo = input("Cargo: ")
        data_contratacao = input("Data de contratação (AAAA-MM-DD): ")

        try:
            self.cursor.execute("""
                INSERT INTO Funcionarios (nome, cargo, data_contratacao)
                VALUES (%s, %s, %s)
            """, (nome, cargo, data_contratacao))
            self.conexao.commit()
            print("Funcionário inserido com sucesso!")
        except pg8000.DatabaseError as error:
            print(f"Erro ao inserir funcionário: {error}")
        input("\nPressione Enter para continuar...")

    def inserir_registro_ponto(self):
        self.limpar_tela()
        print("=== Inserir Registro de Ponto ===")
        funcionario_id = input("ID do funcionário: ")
        data = input("Data (AAAA-MM-DD): ")
        hora_entrada = input("Hora de entrada (HH:MM): ")
        hora_saida = input("Hora de saída (HH:MM): ")

        try:
            self.cursor.execute("""
                INSERT INTO Registros_de_Ponto (funcionario_id, data, hora_entrada, hora_saida)
                VALUES (%s, %s, %s, %s)
            """, (funcionario_id, data, hora_entrada, hora_saida))
            self.conexao.commit()
            print("Registro de ponto inserido com sucesso!")
        except pg8000.DatabaseError as error:
            print(f"Erro ao inserir registro de ponto: {error}")
        input("\nPressione Enter para continuar...")

    def menu_remover_registros(self):
        while True:
            self.limpar_tela()
            print("=== Remover Registros ===")
            print("1. Remover Funcionário")
            print("2. Remover Registro de Ponto")
            print("3. Voltar ao Menu Principal")
            opcao = input("Escolha uma opção: ")

            if opcao == '1':
                self.remover_funcionario()
            elif opcao == '2':
                self.remover_registro_ponto()
            elif opcao == '3':
                break
            else:
                input("Opção inválida! Pressione Enter para continuar...")

    def remover_funcionario(self):
        self.limpar_tela()
        print("=== Remover Funcionário ===")
        funcionario_id = input("ID do funcionário a ser removido: ")
        try:
            self.cursor.execute("DELETE FROM Funcionarios WHERE funcionario_id = %s", (funcionario_id,))
            if self.cursor.rowcount > 0:
                print("Funcionário removido com sucesso!")
            else:
                print("Funcionário não encontrado.")
            self.conexao.commit()
        except pg8000.DatabaseError as error:
            print(f"Erro ao remover funcionário: {error}")
        input("\nPressione Enter para continuar...")

    def remover_registro_ponto(self):
        self.limpar_tela()
        print("=== Remover Registro de Ponto ===")
        registro_id = input("ID do registro de ponto a ser removido: ")
        try:
            self.cursor.execute("DELETE FROM Registros_de_Ponto WHERE registro_id = %s", (registro_id,))
            if self.cursor.rowcount > 0:
                print("Registro de ponto removido com sucesso!")
            else:
                print("Registro de ponto não encontrado.")
            self.conexao.commit()
        except pg8000.DatabaseError as error:
            print(f"Erro ao remover registro de ponto: {error}")
        input("\nPressione Enter para continuar...")

    def menu_atualizar_registros(self):
        while True:
            self.limpar_tela()
            print("=== Atualizar Registros ===")
            print("1. Atualizar Funcionário")
            print("2. Atualizar Registro de Ponto")
            print("3. Voltar ao Menu Principal")
            opcao = input("Escolha uma opção: ")

            if opcao == '1':
                self.atualizar_funcionario()
            elif opcao == '2':
                self.atualizar_registro_ponto()
            elif opcao == '3':
                break
            else:
                input("Opção inválida! Pressione Enter para continuar...")

    def atualizar_funcionario(self):
        self.limpar_tela()
        print("=== Atualizar Funcionário ===")
        funcionario_id = input("ID do funcionário a ser atualizado: ")
        nome = input("Novo nome (deixe em branco para não alterar): ")
        cargo = input("Novo cargo (deixe em branco para não alterar): ")

        update_query = "UPDATE Funcionarios SET "
        update_params = []
        if nome:
            update_query += "nome = %s, "
            update_params.append(nome)
        if cargo:
            update_query += "cargo = %s, "
            update_params.append(cargo)

        if update_params:
            update_query = update_query.rstrip(", ") + " WHERE funcionario_id = %s"
            update_params.append(funcionario_id)

            try:
                self.cursor.execute(update_query, tuple(update_params))
                if self.cursor.rowcount > 0:
                    print("Funcionário atualizado com sucesso!")
                else:
                    print("Funcionário não encontrado.")
                self.conexao.commit()
            except pg8000.DatabaseError as error:
                print(f"Erro ao atualizar funcionário: {error}")
        else:
            print("Nenhuma informação fornecida para atualização.")

        input("\nPressione Enter para continuar...")

    def atualizar_registro_ponto(self):
        self.limpar_tela()
        print("=== Atualizar Registro de Ponto ===")
        registro_id = input("ID do registro de ponto a ser atualizado: ")
        data = input("Nova data (AAAA-MM-DD) (deixe em branco para não alterar): ")
        hora_entrada = input("Nova hora de entrada (HH:MM) (deixe em branco para não alterar): ")
        hora_saida = input("Nova hora de saída (HH:MM) (deixe em branco para não alterar): ")

        update_query = "UPDATE Registros_de_Ponto SET "
        update_params = []
        if data:
            update_query += "data = %s, "
            update_params.append(data)
        if hora_entrada:
            update_query += "hora_entrada = %s, "
            update_params.append(hora_entrada)
        if hora_saida:
            update_query += "hora_saida = %s, "
            update_params.append(hora_saida)

        if update_params:
            update_query = update_query.rstrip(", ") + " WHERE registro_id = %s"
            update_params.append(registro_id)

            try:
                self.cursor.execute(update_query, tuple(update_params))
                if self.cursor.rowcount > 0:
                    print("Registro de ponto atualizado com sucesso!")
                else:
                    print("Registro de ponto não encontrado.")
                self.conexao.commit()
            except pg8000.DatabaseError as error:
                print(f"Erro ao atualizar registro de ponto: {error}")
                self.conexao.rollback()
        else:
            print("Nenhuma informação fornecida para atualização.")

        input("\nPressione Enter para continuar...")

if __name__ == "__main__":
    with SistemaControlePonto() as sistema:
        # sistema.criar_tabelas()  # Cria tabelas, se necessário
        sistema.exibir_splash_screen()
        sistema.exibir_menu_principal()
