import pg8000
import os
from datetime import datetime

class SistemaControlePonto:
    def __init__(self):
        # Configurações de conexão                     
        self.nome_banco = "ponto-db"
        self.usuario = "labdatabase"
        self.senha = "labDatabase2022"
        self.host = "localhost"
        self.porta = 5432  
        self.conexao = None
        self.cursor = None

    def conectar(self):
        try:
            self.conexao = pg8000.connect(
                database=self.nome_banco,
                user=self.usuario,
                password=self.senha,
                host=self.host,
                port=self.porta
            )
            self.cursor = self.conexao.cursor()
            print("Conexão estabelecida com sucesso!")
        except pg8000.DatabaseError as error:
            print(f"Erro ao conectar ao banco de dados: {error}")
            raise

    def __enter__(self):
        self.conectar()
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        if self.conexao:
            if exc_type is None:
                self.conexao.commit()
            else:
                self.conexao.rollback()
                print(f"Ocorreu um erro: {exc_val}")
            if self.cursor:
                self.cursor.close()
            self.conexao.close()
            print("Conexão fechada.")

    def limpar_tela(self):
        os.system('cls' if os.name == 'nt' else 'clear')

    def exibir_splash_screen(self):
        self.limpar_tela()
        print("=" * 40)
        print("Sistema de Controle de Ponto")
        print("Desenvolvido por: Julia Negri, Maria Isabel, Rafael Caires")
        print("Professor: Howard Roatti")
        print("=" * 40)

        try:
            self.cursor.execute("SELECT COUNT(*) FROM Funcionarios")
            count_funcionarios = self.cursor.fetchone()[0]
            self.cursor.execute("SELECT COUNT(*) FROM Registros_de_Ponto")
            count_registros = self.cursor.fetchone()[0]
            print(f"\nTotal de Funcionários: {count_funcionarios}")
            print(f"Total de Registros de Ponto: {count_registros}")
        except pg8000.DatabaseError as error:
            print(f"Erro ao consultar contagem de registros: {error}")
        
        input("\nPressione Enter para continuar...")

    def exibir_menu_principal(self):
        while True:
            self.limpar_tela()
            print("\n=== Menu Principal ===")
            print("1. Relatórios")
            print("2. Inserir Registros")
            print("3. Remover Registros")
            print("4. Atualizar Registros")
            print("5. Sair")
            
            opcao = input("\nEscolha uma opção: ")

            if opcao == '1':
                self.menu_relatorios()
            elif opcao == '2':
                self.menu_inserir_registros()
            elif opcao == '3':
                self.menu_remover_registros()
            elif opcao == '4':
                self.menu_atualizar_registros()
            elif opcao == '5':
                print("\nSaindo do sistema...")
                break
            else:
                input("\nOpção inválida! Pressione Enter para continuar...")

    def menu_relatorios(self):
        while True:
            self.limpar_tela()
            print("\n=== Menu de Relatórios ===")
            print("1. Relatório de Horas Trabalhadas por Funcionário")
            print("2. Relatório de Registros de Ponto")
            print("3. Voltar ao Menu Principal")
            
            opcao = input("\nEscolha uma opção: ")

            if opcao == '1':
                self.relatorio_horas_trabalhadas()
            elif opcao == '2':
                self.relatorio_registros_ponto()
            elif opcao == '3':
                break
            else:
                input("\nOpção inválida! Pressione Enter para continuar...")

    def relatorio_horas_trabalhadas(self):
        try:
            self.cursor.execute("""
                SELECT 
                    f.funcionario_id,
                    f.nome,
                    COUNT(r.registro_id) AS total_registros,
                    COALESCE(SUM(
                        EXTRACT(EPOCH FROM (r.hora_saida - r.hora_entrada))/3600
                    ), 0) AS horas_trabalhadas
                FROM Funcionarios f
                LEFT JOIN Registros_de_Ponto r ON f.funcionario_id = r.funcionario_id
                GROUP BY f.funcionario_id, f.nome
                ORDER BY f.nome
            """)
            resultados = self.cursor.fetchall()
            
            self.limpar_tela()
            print("\n=== Relatório de Horas Trabalhadas por Funcionário ===\n")
            
            if not resultados:
                print("Nenhum registro encontrado.")
            else:
                print(f"{'ID':^5} | {'Nome':<30} | {'Total Registros':^15} | {'Horas Trabalhadas':^20}")
                print("-" * 75)
                for linha in resultados:
                    print(f"{linha[0]:^5} | {linha[1]:<30} | {linha[2]:^15} | {linha[3]:^20.2f}")
                
            input("\nPressione Enter para continuar...")
        except pg8000.DatabaseError as error:
            print(f"\nErro ao gerar relatório: {error}")
            input("\nPressione Enter para continuar...")

    def relatorio_registros_ponto(self):
        try:
            self.cursor.execute("""
                SELECT 
                    f.funcionario_id,
                    f.nome,
                    r.data::date,
                    r.hora_entrada,
                    r.hora_saida,
                    EXTRACT(EPOCH FROM (r.hora_saida - r.hora_entrada))/3600 AS horas_trabalhadas
                FROM Funcionarios f
                JOIN Registros_de_Ponto r ON f.funcionario_id = r.funcionario_id
                ORDER BY r.data DESC, f.nome
            """)
            resultados = self.cursor.fetchall()
            
            self.limpar_tela()
            print("\n=== Relatório de Registros de Ponto ===\n")
            
            if not resultados:
                print("Nenhum registro encontrado.")
            else:
                print(f"{'ID':^5} | {'Nome':<30} | {'Data':^12} | {'Entrada':^8} | {'Saída':^8} | {'Horas':^8}")
                print("-" * 80)
                for linha in resultados:
                    print(f"{linha[0]:^5} | {linha[1]:<30} | {linha[2]} | {linha[3]} | {linha[4]} | {linha[5]:^8.2f}")
            
            input("\nPressione Enter para continuar...")
        except pg8000.DatabaseError as error:
            print(f"\nErro ao gerar relatório: {error}")
            input("\nPressione Enter para continuar...")

    def menu_inserir_registros(self):
        while True:
            self.limpar_tela()
            print("\n=== Inserir Registros ===")
            print("1. Inserir Funcionário")
            print("2. Inserir Registro de Ponto")
            print("3. Voltar ao Menu Principal")
            
            opcao = input("\nEscolha uma opção: ")

            if opcao == '1':
                self.inserir_funcionario()
            elif opcao == '2':
                self.inserir_registro_ponto()
            elif opcao == '3':
                break
            else:
                input("\nOpção inválida! Pressione Enter para continuar...")

    def inserir_funcionario(self):
        self.limpar_tela()
        print("\n=== Inserir Novo Funcionário ===")

        try:
            nome = input("\nNome do funcionário: ")
            cargo = input("Cargo: ")
            
            # Entrada da data separadamente
            ano = input("Ano de contratação (AAAA): ")
            mes = input("Mês de contratação (MM): ")
            dia = input("Dia de contratação (DD): ")
            
            # Validação básica dos dados
            if not nome or not cargo or not ano or not mes or not dia:
                print("\nTodos os campos são obrigatórios!")
                input("\nPressione Enter para continuar...")
                return

            # Validação do formato da data
            try:
                data_contratacao = datetime.strptime(f"{ano}-{mes}-{dia}", "%Y-%m-%d").date()
            except ValueError:
                print("\nData inválida! Verifique os valores informados.")
                input("\nPressione Enter para continuar...")
                return

            # Inserção do funcionário
            self.cursor.execute("""
                INSERT INTO Funcionarios (nome, cargo, data_contratacao)
                VALUES (%s, %s, %s)
                RETURNING funcionario_id
            """, (nome, cargo, data_contratacao))
            
            novo_id = self.cursor.fetchone()[0]
            self.conexao.commit()
            print(f"\nFuncionário inserido com sucesso! ID: {novo_id}")

        except pg8000.DatabaseError as error:
            self.conexao.rollback()
            print(f"\nErro ao inserir funcionário: {error}")
        
        input("\nPressione Enter para continuar...")
    
    def inserir_registro_ponto(self):
        self.limpar_tela()
        print("\n=== Inserir Registro de Ponto ===")

        try:
            # Lista funcionários disponíveis
            self.cursor.execute("SELECT funcionario_id, nome FROM Funcionarios ORDER BY nome")
            funcionarios = self.cursor.fetchall()

            if not funcionarios:
                print("\nNão há funcionários cadastrados!")
                input("\nPressione Enter para continuar...")
                return

            print("\nFuncionários disponíveis:")
            for func in funcionarios:
                print(f"ID: {func[0]} - Nome: {func[1]}")

            funcionario_id = input("\nID do funcionário: ")

            # Entrada da data separadamente
            dia = input("Dia (DD): ")
            mes = input("Mês (MM): ")
            ano = input("Ano (AAAA): ")
            
            # Validação da data
            try:
                data_formatada = datetime.strptime(f"{ano}-{mes}-{dia}", "%Y-%m-%d").date()
            except ValueError:
                print("\nData inválida! Verifique o formato e tente novamente.")
                input("\nPressione Enter para continuar...")
                return

            # Entrada do horário separadamente
            hora_entrada_h = input("Hora de entrada (HH): ")
            minuto_entrada_m = input("Minuto de entrada (MM): ")
            
            hora_saida_h = input("Hora de saída (HH): ")
            minuto_saida_m = input("Minuto de saída (MM): ")

            # Validação dos horários
            try:
                hora_entrada = f"{hora_entrada_h}:{minuto_entrada_m}:00"
                hora_saida = f"{hora_saida_h}:{minuto_saida_m}:00"
                datetime.strptime(hora_entrada, "%H:%M:%S")  # Verifica se o horário é válido
                datetime.strptime(hora_saida, "%H:%M:%S")
            except ValueError:
                print("\nHorário inválido! Verifique o formato e tente novamente.")
                input("\nPressione Enter para continuar...")
                return

            # Validações
            if not all([funcionario_id, data_formatada]):
                print("\nTodos os campos são obrigatórios!")
                input("\nPressione Enter para continuar...")
                return

            # Verifica se o funcionário existe
            self.cursor.execute("SELECT nome FROM Funcionarios WHERE funcionario_id = %s", (funcionario_id,))
            if not self.cursor.fetchone():
                print("\nFuncionário não encontrado!")
                input("\nPressione Enter para continuar...")
                return

            # Inserção do registro
            self.cursor.execute("""
                INSERT INTO Registros_de_Ponto (funcionario_id, data, hora_entrada, hora_saida)
                VALUES (%s, %s, %s, %s)
                RETURNING registro_id
            """, (funcionario_id, data_formatada, hora_entrada, hora_saida))
            
            novo_id = self.cursor.fetchone()[0]
            self.conexao.commit()
            print(f"\nRegistro de ponto inserido com sucesso! ID: {novo_id}")

        except pg8000.DatabaseError as error:
            self.conexao.rollback()
            print(f"\nErro ao inserir registro de ponto: {error}")
        
        input("\nPressione Enter para continuar...")     

    def menu_remover_registros(self):
        while True:
            self.limpar_tela()
            print("\n=== Remover Registros ===")
            print("1. Remover Funcionário")
            print("2. Remover Registro de Ponto")
            print("3. Voltar ao Menu Principal")
            
            opcao = input("\nEscolha uma opção: ")

            if opcao == '1':
                self.remover_funcionario()
            elif opcao == '2':
                self.remover_registro_ponto()
            elif opcao == '3':
                break
            else:
                input("\nOpção inválida! Pressione Enter para continuar...")

    def remover_funcionario(self):
        self.limpar_tela()
        print("\n=== Remover Funcionário ===")

        try:
            # Lista funcionários disponíveis
            self.cursor.execute("""
                SELECT f.funcionario_id, f.nome, COUNT(r.registro_id) as registros
                FROM Funcionarios f
                LEFT JOIN Registros_de_Ponto r ON f.funcionario_id = r.funcionario_id
                GROUP BY f.funcionario_id, f.nome
                ORDER BY f.nome
            """)
            funcionarios = self.cursor.fetchall()

            if not funcionarios:
                print("\nNão há funcionários cadastrados!")
                input("\nPressione Enter para continuar...")
                return

            print("\nFuncionários disponíveis:")
            for func in funcionarios:
                print(f"ID: {func[0]} - Nome: {func[1]} - Registros de Ponto: {func[2]}")

            funcionario_id = input("\nID do funcionário a ser removido: ")

            # Verifica se o funcionário existe
            self.cursor.execute("""
                SELECT funcionario_id, nome,
                    (SELECT COUNT(*) FROM Registros_de_Ponto WHERE funcionario_id = %s) as registros
                FROM Funcionarios WHERE funcionario_id = %s
            """, (funcionario_id, funcionario_id))
            
            funcionario = self.cursor.fetchone()
            if not funcionario:
                print("\nFuncionário não encontrado!")
                input("\nPressione Enter para continuar...")
                return

            if funcionario[2] > 0:
                print(f"\nATENÇÃO: Este funcionário possui {funcionario[2]} registros de ponto!")
                confirma = input("Deseja remover o funcionário e todos os seus registros? (S/N): ").upper()
                
                if confirma == 'S':
                    self.cursor.execute("DELETE FROM Registros_de_Ponto WHERE funcionario_id = %s", (funcionario_id,))
                else:
                    print("\nOperação cancelada!")
                    input("\nPressione Enter para continuar...")
                    return

            self.cursor.execute("DELETE FROM Funcionarios WHERE funcionario_id = %s", (funcionario_id,))
            self.conexao.commit()
            print("\nFuncionário removido com sucesso!")

        except pg8000.DatabaseError as error:
            self.conexao.rollback()
            print(f"\nErro ao remover funcionário: {error}")
        
        input("\nPressione Enter para continuar...")

    def remover_registro_ponto(self):
        self.limpar_tela()
        print("\n=== Remover Registro de Ponto ===")

        try:
            # Lista registros disponíveis
            self.cursor.execute("""
                SELECT r.registro_id, f.nome, r.data::date, r.hora_entrada::time, r.hora_saida::time
                FROM Registros_de_Ponto r
                JOIN Funcionarios f ON r.funcionario_id = f.funcionario_id
                ORDER BY r.data DESC, f.nome
            """)
            registros = self.cursor.fetchall()

            if not registros:
                print("\nNão há registros de ponto cadastrados!")
                input("\nPressione Enter para continuar...")
                return

            print("\nRegistros disponíveis:")
            for registro in registros:
                print(f"ID: {registro[0]} - Funcionário: {registro[1]} - Data: {registro[2]}")

            registro_id = input("\nID do registro a ser removido: ")

            # Verifica se o registro existe
            self.cursor.execute("SELECT registro_id FROM Registros_de_Ponto WHERE registro_id = %s", (registro_id,))
            if not self.cursor.fetchone():
                print("\nRegistro não encontrado!")
                input("\nPressione Enter para continuar...")
                return

            # Remover registro
            self.cursor.execute("DELETE FROM Registros_de_Ponto WHERE registro_id = %s", (registro_id,))
            self.conexao.commit()
            print("\nRegistro removido com sucesso!")

        except pg8000.DatabaseError as error:
            self.conexao.rollback()
            print(f"\nErro ao remover registro de ponto: {error}")
        
        input("\nPressione Enter para continuar...")

    def menu_atualizar_registros(self):
        while True:
            self.limpar_tela()
            print("\n=== Atualizar Registros ===")
            print("1. Atualizar Funcionário")
            print("2. Atualizar Registro de Ponto")
            print("3. Voltar ao Menu Principal")
            
            opcao = input("\nEscolha uma opção: ")

            if opcao == '1':
                self.atualizar_funcionario()
            elif opcao == '2':
                self.atualizar_registro_ponto()
            elif opcao == '3':
                break
            else:
                input("\nOpção inválida! Pressione Enter para continuar...")

    def atualizar_funcionario(self):
        self.limpar_tela()
        print("\n=== Atualizar Funcionário ===")

        try:
            # Lista funcionários disponíveis
            self.cursor.execute("""
                SELECT funcionario_id, nome FROM Funcionarios ORDER BY nome
            """)
            funcionarios = self.cursor.fetchall()

            if not funcionarios:
                print("\nNão há funcionários cadastrados!")
                input("\nPressione Enter para continuar...")
                return

            print("\nFuncionários disponíveis:")
            for func in funcionarios:
                print(f"ID: {func[0]} - Nome: {func[1]}")

            funcionario_id = input("\nID do funcionário a ser atualizado: ")

            # Verifica se o funcionário existe
            self.cursor.execute("SELECT funcionario_id FROM Funcionarios WHERE funcionario_id = %s", (funcionario_id,))
            if not self.cursor.fetchone():
                print("\nFuncionário não encontrado!")
                input("\nPressione Enter para continuar...")
                return

            novo_nome = input("Novo nome: ")
            novo_cargo = input("Novo cargo: ")

            # Atualização do funcionário
            self.cursor.execute("""
                UPDATE Funcionarios
                SET nome = %s, cargo = %s
                WHERE funcionario_id = %s
            """, (novo_nome, novo_cargo, funcionario_id))
            
            self.conexao.commit()
            print("\nFuncionário atualizado com sucesso!")

        except pg8000.DatabaseError as error:
            self.conexao.rollback()
            print(f"\nErro ao atualizar funcionário: {error}")
        
        input("\nPressione Enter para continuar...")

    def atualizar_registro_ponto(self):
        print("\n=== Atualizar Registro de Ponto ===")

        try:
            # Lista registros disponíveis
            self.cursor.execute("""
                SELECT r.registro_id, f.nome, r.data::date, r.hora_entrada::time, r.hora_saida::time
                FROM Registros_de_Ponto r
                JOIN Funcionarios f ON r.funcionario_id = f.funcionario_id
                ORDER BY r.data DESC, f.nome
            """)
            registros = self.cursor.fetchall()

            if not registros:
                print("\nNão há registros de ponto cadastrados!")
                input("\nPressione Enter para continuar...")
                return

            print("\nRegistros disponíveis:")
            for registro in registros:
                print(f"ID: {registro[0]} - Funcionário: {registro[1]} - Data: {registro[2]}")

            registro_id = input("\nID do registro a ser atualizado: ")

            # Verifica se o registro existe
            self.cursor.execute("SELECT registro_id FROM Registros_de_Ponto WHERE registro_id = %s", (registro_id,))
            if not self.cursor.fetchone():
                print("\nRegistro não encontrado!")
                input("\nPressione Enter para continuar...")
                return

            # Entrada da nova data separadamente
            dia = input("Novo dia (DD): ")
            mes = input("Novo mês (MM): ")
            ano = input("Novo ano (AAAA): ")

            # Validação da nova data
            try:
                nova_data_formatada = datetime.strptime(f"{ano}-{mes}-{dia}", "%Y-%m-%d").date()
            except ValueError:
                print("\nData inválida! Verifique o formato e tente novamente.")
                input("\nPressione Enter para continuar...")
                return

            # Entrada do novo horário separadamente
            hora_entrada_h = input("Nova hora de entrada (HH): ")
            minuto_entrada_m = input("Novo minuto de entrada (MM): ")
            
            hora_saida_h = input("Nova hora de saída (HH): ")
            minuto_saida_m = input("Novo minuto de saída (MM): ")

            # Validação dos novos horários
            try:
                nova_hora_entrada = f"{hora_entrada_h}:{minuto_entrada_m}:00"
                nova_hora_saida = f"{hora_saida_h}:{minuto_saida_m}:00"
                datetime.strptime(nova_hora_entrada, "%H:%M:%S")  # Verifica se o horário é válido
                datetime.strptime(nova_hora_saida, "%H:%M:%S")
            except ValueError:
                print("\nHorário inválido! Verifique o formato e tente novamente.")
                input("\nPressione Enter para continuar...")
                return

            # Atualização do registro
            self.cursor.execute("""
                UPDATE Registros_de_Ponto
                SET data = %s, hora_entrada = %s, hora_saida = %s
                WHERE registro_id = %s
            """, (nova_data_formatada, nova_hora_entrada, nova_hora_saida, registro_id))
            
            self.conexao.commit()
            print("\nRegistro atualizado com sucesso!")

        except pg8000.DatabaseError as error:
            self.conexao.rollback()
            print(f"\nErro ao atualizar registro de ponto: {error}")
        
        input("\nPressione Enter para continuar...")

if __name__ == "__main__":
    with SistemaControlePonto() as sistema:
        sistema.exibir_splash_screen()
        sistema.exibir_menu_principal()
